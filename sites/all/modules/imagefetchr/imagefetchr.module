<?php
// $Id: $

	/**
	 *	Implementation of hook_help
	 *		Adds help menu item
	 */
function imagefetchr_help($path, $arg) {
  switch ($path) {
   case 'admin/help#imagefetchr':
      return t('Grabs images and creates preview images from URLs');
  }
}


	/**
	 * Implementation of hook_perm()
	 * 		Sets the permissions for the module
	 */
function imagefetchr_perm() {
  return array('administer imagefetchr', 'access imagefetchr');
}	

	/**
	 *	Implementation of hook_menu
	 *		Adds menu items or page callbacks for module 
	 */
function imagefetchr_menu() {
	$items = array();
   
	$items['imagefetchr'] = array(  
		'page callback' => 'imagefetchr_callback',
		'title'  => t('ImageFetchr'),
		'access callback' => true,
		'type' => MENU_CALLBACK
	);

	$items['imagefetchr/getfields/%'] = array(  
		'page callback' => 'imagefetchr_get_node_fields',
		'page arguments' => array(2),
		'title'  => t('Get fields'),
		'access callback' => true,
		'type' => MENU_CALLBACK
	);



	$items['admin/settings/imagefetchr'] = array(
		'title' 			=> t('ImageFetchr'),
		'description' 		=> t('ImageFetchr module settings'),
		'page callback' 	=> 'drupal_get_form',
		'page arguments' 	=> array('imagefetchr_admin_settings'),
		'access arguments' 	=> array('administer imagefetchr'),
		'type' => MENU_NORMAL_ITEM,
		'file'				=> 'imagefetchr.admin.inc',
	);

  return $items;
}



	/*
	 * Implementation of hook_theme().
	 *		create entries for all module specific themed functions
	 */
function imagefetchr_theme() {
	$theme = array(
    	'imagefetchr' => array(
      		'arguments' => array(
        		'namespace' => NULL,
        		'path' => '',
				'alt' => NULL,
        		'title' => NULL,
    	)),
		'imagefetchr_displayform' => array(
			'arguments' => array('carouselid'=> NULL),
		),
		/*'imagefetchr_form_submit' => array(
			'arguments' => array('form'=> NULL, 'formstate'=>NULL),
		),*/
  );
  
   return $theme;

}

/**
 * Format a textfield.
 *
 * @param $element
 *   An associative array containing the properties of the element.
 *   Properties used:  title, value, description, size, maxlength, required, attributes autocomplete_path
 * @return
 *   A themed HTML string representing the textfield.
 *
 * @ingroup themeable
 */
function theme_imagefetchr_textfield($element) {
  $size = empty($element['#size']) ? '' : ' size="'. $element['#size'] .'"';
  $maxlength = empty($element['#maxlength']) ? '' : ' maxlength="'. $element['#maxlength'] .'"';
  $class = array('form-text', 'imagefetchr');
  $extra = '';
  $output = '';

  if ($element['#autocomplete_path'] && menu_valid_path(array('link_path' => $element['#autocomplete_path']))) {
    drupal_add_js('misc/autocomplete.js');
    $class[] = 'form-autocomplete';
    $extra =  '<input class="autocomplete" type="hidden" id="'. $element['#id'] .'-autocomplete" value="'. check_url(url($element['#autocomplete_path'], array('absolute' => TRUE))) .'" disabled="disabled" />';
  }
  _form_set_class($element, $class);

  if (isset($element['#field_prefix'])) {
    $output .= '<span class="field-prefix">'. $element['#field_prefix'] .'</span> ';
  }

  $output .= '<input type="text"'. $maxlength .' name="'. $element['#name'] .'" id="'. $element['#id'] .'"'. $size .' value="'. check_plain($element['#value']) .'"'. drupal_attributes($element['#attributes']) .' />';

  if (isset($element['#field_suffix'])) {
    $output .= ' <span class="field-suffix">'. $element['#field_suffix'] .'</span>';
  }

  return theme('form_element', $element, $output) . $extra;
}


	/*
	 * Implementation of hook_form_alter().
	 *		create entries for all module specific themed functions
	 */
function imagefetchr_form_alter(&$form, $form_state, $form_id) {
	
	$nodeTypes = variable_get('imagefetchr_node_types', array()); 	//Get node types from admin settings
	
		//Loop through each node type
	foreach($nodeTypes as $type) {
		
		switch($form_id){ 
	 
			case $type.'_node_form':

                  // Force buttons to bottom of form
				$form['buttons']['#weight'] = 100;

                  // Add CSS and JS for module
				$imagefetchrPath = drupal_get_path('module', 'imagefetchr');
				drupal_add_js($imagefetchrPath . '/js/jquery.easing.1.3.js');
				drupal_add_js($imagefetchrPath .'/js/imagefetchr.js', 'module');
				drupal_add_css($imagefetchrPath .'/css/imagefetchr.css', 'module');
			
				if(!$form['group_imagefetchr']) {
			
					$form['group_imagefetchr'] = array(
						'#type'=>'fieldset',
						'#title'=> t('Select Image'),
						'#description'=> t('Please select an image to asssoicate with the post'),
						'#collapsed'=>False,
						'#collapsible'=>True,
						'#weight'=> 10,
					);
			
	
				}
                
                  // Check if there is an existing thumbnail associated with node to automatically set upload thumbnail checkbox to true
				if($form['field_image'][0]['#default_value']['fid'] || $form['group_imagefetchr']['field_image'][0]['#default_value']['fid']){
					$fid = 1;
				} else {
					$fid = 0;
				}

                  // Remove title from Thumbnail Image
				$form['group_imagefetchr']['field_image']['#title'] = '';
				$form['group_imagefetchr']['field_image'][0]['#title'] = '';													
				$form['group_imagefetchr']['field_image']['#weight'] = 1;
				$form['group_imagefetchr']['field_image']['#weight'] = 1;

                  // Create checkbox for upload field
				$form['group_imagefetchr']['upload'] = array(
					'#type' => 'checkbox',
					'#id'=> 'imagefetchr-checkbox-upload',
					'#title' => t('Upload Image'),
					'#tree'			=> true,
					'#attributes'	=> array('class'=>'upload-toggle'),
					'#weight'=> 0,
					'#default_value'=> $fid,
				);

                  // Create checkbox for preview carousel
				$form['group_imagefetchr']['selector'] = array(
					'#type' => 'checkbox',
					'#id'=> 'imagefetchr-checkbox-preview',
					'#title' => 'Generate Image/screenshot',
					'#tree'			=> true,
					'#attributes'	=> array('class'=>'preview-toggle'),
					'#weight'=> 2,
				);

                  // Create imagefetchr carousel
				$form['group_imagefetchr']['display'] = array(
					'#type' => 'item',
					'#value' => theme("imagefetchr_displayform", "imagefetchr_carousel"),
					'#id'=> 'imagefetchr-display',
						'#weight'=> 3,
						'#attributes'	=> array('class'=>'imagefetchr_fields'),
				);

                  // Create hidden field to hold url to be saved
				$form['group_imagefetchr']['imagefetchr_file'] = array(
						'#type' => 'hidden',
						'#id'=> 'imagefetchr_file',
						'#weight'=> 5,
				);

                //$form['#after_build'][] = 'imagefetchr_after_build';  //Add after_build function to add imagefetchr styles to form fields
				
                  //Add
                /*$nodefields = imagefetchr_get_node_fields($type);
                foreach($nodefields as $field){
                    previewgenerator_add_classname($form[$field]);
                }*/

				$form['#submit'][] = 'imagefetchr_form_submit';
				$form['#validate'][] = 'imagefetchr_form_validate';

                
			break;
		}
	
	}

    return $form;
}

  /*
   * Implimentation of hook_after_build()
   * 
   */
function imagefetchr_after_build($form, &$form_state) {
  
  $nodeTypes = variable_get('imagefetchr_node_types', array()); 	//Get node types from admin settings
	
		//Loop through each node type
  foreach($nodeTypes as $type) {
		
    $node_fields = imagefetchr_get_node_fields($type); // Load content type fields
    //$default_fields = imagefetchr_get_node_fields($nodetype);           // Get default fields for content type
    
    $cck_fields = array_keys(content_fields(NULL, $type));          // Get array just for field name stored in array key
    $fields = array_merge((array)$node_fields, (array)$cck_fields);  // Merge array as one for checkboxes.

    foreach($fields as $field){
      //foreach (element_children($field) as $key) {
      if (isset($form[$field]) && ($form[$field]['#name'] == $field || $form[$field]['#field_name'] == $field)) {
        foreach (module_implements('node_form_element_alter') as $module) {
          call_user_func_array($module .'_node_form_element_alter', array($field, &$form[$field]));
        }
      }
      /*else {
        MODULENAME_node_form_element_alter_register($elements[$key], $name, $callback);
      }*/

      imagefetchr_add_classname($form[$field]);
    }
  }

  return $form;
}


function imagefetchr_node_form_element_alter($name, &$element) {
  imagefetchr_add_classname($element);
  //if ($name == 'field_my_imagefield_add_more') {
  //  $element['#value'] = t('More images, please!');
  //}
}


function imagefetchr_field_after_build($form, &$form_state) {
	//echo "<pre>"; print_r($form_element); echo "</pre>";
	//$nodefields = imagefetchr_get_node_fields($form['type']['#value']);
	//foreach($nodefields as $field){
	imagefetchr_add_classname($form[$field]);
	//}
  return $form;
}

function imagefetchr_add_classname(&$elements) {
  foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {

      // Recurse through all children elements.
      imagefetchr_add_classname($elements[$key]);
    }
  }

  if (isset($elements['#field'])) {
    $elements['#field']['attributes']['class'][] = 'imagefetchr';
    $elements['#field']['columns']['attributes']['class'] = array('imagefetchr');
  }

  if (!isset($elements['#attributes'])) {
    $elements['#attributes'] = array();
  }
  $elements['#attributes']['class'] = 'imagefetchr';  //Used for builtin node fields
}

	/*
	 * Implementation of hook_form_validation().
	 *		Purpose: Define custom events when BLOG NODE FORM is validated
	 */
function imagefetchr_form_validate($form, &$form_state) {
	
		//Add CSS and JS for module
	$imagefetchrPath = drupal_get_path('module', 'imagefetchr');
	drupal_add_js($imagefetchrPath . '/js/jquery.easing.1.3.js');
	drupal_add_js($imagefetchrPath .'/js/imagefetchr.js', 'module');
	drupal_add_css($imagefetchrPath .'/css/imagefetchr.css', 'module');
	
	if(empty($form_state['values']['upload']) && empty($form_state['values']['selector'])) {
		form_set_error('selector', t('Please add an image to represent the post'));
	}
	if(!empty($form_state['values']['upload'])) {
		if(!$form_state['values']['field_image'][0]['fid']) {
			//$valid = FALSE;
			form_set_error('field_image', t('No image selected to upload'));
		}
		
	}
	
	if(!empty($form_state['values']['selector'])) {
		
		if(empty($form_state['values']['imagefetchr_file']) && empty($form_state['values']['thumbnail_linkto'])) {
			//$valid = FALSE;
			form_set_error('selector', t('No image selected as thumbnail'));
		}
	}
}

	
	/**
	*  Implimentation of hook_form_submit()
	*	
	* SourceCode: 
	*  - Programatically creating filefield entries (http://drupal.org/node/330421)
	*/
function imagefetchr_form_submit($form, &$form_state){

		//if upload checkbox empty and selector checkbox turned on
	if(empty($form_state['values']['upload']) && !empty($form_state['values']['selector'])) {
		
		if(empty($form_state['node_preview'])) {
		
				//Check if url exists in link field
			if($form_state['values']['imagefetchr_file']) {

				$image = imagefetchr_saveImage($form_state['values']['imagefetchr_file']);	//Call function to create local image thumbnail from url provided 
				
				$file = new stdClass();	//Create object to store array info for DB
					$file->filename = basename($image);
					$file->filepath = $image;
					$file->filemime = file_get_mimetype($image);
					$file->filesize = filesize($image);
					$file->uid = 3;
					$file->status = 1;
					$file->timestamp = time();
					
					drupal_write_record('files', $file);	// insert file object into database
					
						// Search DB for fid of file just created
					$file->fid = db_result(db_query("SELECT fid FROM {files} WHERE filename = '%s'",  array(
						'%s' => basename($image),
					)));
				//}
				
					//Assign newly created file object to blog node
				$form_state['values']['field_image'][0] = array(
						'fid' => $file->fid,
						'title' => basename($image),
						'filename' => basename($image),
						'description' => basename($image),
						'filepath' => $image,
						'filesize' => filesize($image),
						'list'=> 1,
					);
			}
		}
		
	}
		/*USED FOR DEBUG*/
	//$form_state['redirect'] = "";
	//echo "<pre>"; print_r($form); echo "</pre>";
	//echo "<pre>"; print_r($form_state); echo "</pre>";
	return;
}

	/**
	*	
	*/
function imagefetchr_file_references($file) {
  // Report a reference for every file.
  return array('imagefetchr' => 1);
}


	/**
	* Save Image to local filesystem
	* 	Call remote service to generate thumbnail, then save to local filesystem
	*
	*	Original Sourcecode:
	*	- Use remote images and cache them localy with image cache (http://drupal.org/node/251009)
	*/
function imagefetchr_saveImage($path) {

	global $user;

	$destination_path = file_directory_path();	//Set directory where to save files
  $imagename = date("mdYgis", time()) ."-". $user->uid .".". substr($path, strrpos($path, '.') + 1);	//Create image name based on date/time and finding the file extension from the pathname
  $image_path = $destination_path."/". $imagename;	//Create image path from destination and image name
	
		//Download file for storing on local system
	$remote_image = file_get_contents($path) or die('Could not grab the file');	//Get remote file
    $local_image  = fopen($image_path, 'w+') or die('Could not create the file');	//create local file
    fputs($local_image, $remote_image) or die('Could not write to the file');	//store remote file in newly created local file
    fclose($local_image);	//close local file
    unset($remote_image);	//Garbage cleanup
  
	   //Set message 
	drupal_set_message("The file ". $image_path ." was created.");
   
    return $image_path; //return image
}


	/**
	*  Themable display form for module
	*/
function theme_imagefetchr_displayform($carouselid) {
	
	$imagefetchrPath = drupal_get_path('module', 'imagefetchr');
	
	$output = '<div id="' .$carouselid .'" class="carousel">
			<div class="carouseltop">
				
			</div>
			<div id="' .$carouselid .'_bulletcontainer" class="bulletcontainer">
				<div id="' .$carouselid .'_navbuttons" class="carouselnavbuttons">
					
					<div id="' .$carouselid .'_bulletcontainer" class="bulletcontainer"></div>
					
				</div>
				<div id="' .$carouselid .'_navindicate" class="navindicate"></div>
			</div>
			<a id="' .$carouselid .'_previousbutton" class="previousbutton" title="Previous"></a>
			<div id="' .$carouselid .'_window" class="_clipwindow">
				<div id="' .$carouselid .'_statuscontainer" class="loadingcontainer">
					<div id="' .$carouselid .'_status" class="status"></div>
					<img src="/'. $imagefetchrPath .'/images/ajax-loader.gif" id="' .$carouselid .'_loading" class="" alt="Loading"/>
				</div>
				<div id="' .$carouselid .'_imagecontainer" class="imagecontainer"></div>
			</div>
			<a id="' .$carouselid .'_nextbutton" class="nextbutton" title="Next"></a>
			<div class="carouselbottom">
				<input type="checkbox" id="flushcache" value="true" /> <label for="flushcache">Flush Cache</label>
				<input type="checkbox" id="screenshot" value="true" checked="checked"/> <label for="screenshot">Screenshots</label>
				<a href="#" id="' .$carouselid .'_refresh_btn" class="refresh_btn pregen_btn">Load Thumbnails</a>
				<div id="'.$carouselid .'_addlink_container" class="addlink_container">
					<a id="'.$carouselid .'_addlink_btn" class="pregen_btn btn_addlink">Add Link URL</a><br/>
					<input type="text" id="'.$carouselid .'_addlink_field" name="'.$carouselid .'_addlink_field" class="popupfield" size="50" maxlength="500"/>
				</div>
			</div>
		</div>';
		return $output;
}


	/**  
	* Get all urls from form POST and return images in JSON wrapper
	*/
function imagefetchr_callback() {
  		//If url post found
	
  if($_POST['url']) {
	  
    $imgArray = array();	// Define new thumbnail container array
    $display = array();		// Define new display array
		
        //Cycle through each url
    $urls = $_POST['url'];
    $screenshot = $_POST['screenshot'];
    $cache = $_POST['cache'];
    $apikey = variable_get('imagefetchr_bluga_apikey', '');
    $api_id = variable_get('imagefetchr_bluga_userid', '');

    foreach ($urls as $url) {
      //echo $url;
      $images = array();

      if($_POST['screenshot'] == "true" && (!isset($apikey) || !isset($api_id))){
          $imgArray[] = imagefetchr_getScreenshot($url, $cache);
      }

      $images = imagefetchr_getimages($url);  //retreive list of images and store in variable
      $imgArray = array_merge((array)$imgArray, (array)$images);  //for each thumbnail found, store in array to be returned
    }
		
    //print_r($imgArray);
		
    //$imgArray['thumbnails'] = $imgArray;
    $display['thumbnails'] = $imgArray;
    //print_r($display);
		
    if($display) {

        echo imagefetchr_arr2json($display);
    } else {
        $errorArr = array("error"=>"No Images found.");
        echo imagefetchr_arr2json($errorArr);
    }
		
  } else {
    $errorArr = array("error"=>"No URLs found.");
    echo imagefetchr_arr2json($errorArr);
  }
  
}

	/**
	* Get Screenshot image from 3rd party service
	* 
	*   Call remote service to generate thumbnail, then save to local filesystem
    *
	*	Original Sourcecode:
	*	- Use remote images and cache them localy with image cache (http://drupal.org/node/251009)
	*/
function imagefetchr_getScreenshot($path, $recreate = false) {
  global $base_url;
  global $user;

  $output = "";	//Clear $output value
  $destination_path = file_directory_path() ."/temp";	//Set directory where to save files
  
    //Check of destination path exists
  if(!file_exists($destination_path)) {
    mkdir($destination_path);
    chmod($destination_path, 0577);
  }

    // Make sure destination path is writable
  if(!is_writable($destination_path)){
    drupal_set_message("Directory for ImageFetchr is not writable: ". $destination_path);
    return;
  }

  $image_name = date("mdYgis", time()) ."-". $user->uid;
  $image_path = $destination_path."/".$image_name .".jpg";	//Create image path from destination and image name
  $imagetemp_path = file_directory_path() ."default_screenshot.jpg";

    // configuration parameters
  $url = 'http://webthumb.bluga.net/easythumb.php?'; // make a thumbnail of this url

  $apikey = variable_get('imagefetchr_bluga_apikey', '');
  $userId = variable_get('imagefetchr_bluga_userid', '');
  $date = gmdate('Ymd');
  $size = 'large';
  $cache = 1;

  $fetchUrl = $url. "user=$userId&url=".urlencode($path)."&hash=".md5($date.$path.$apikey)."&size=". $size ."&cache=". $cache;

        //Call to generate image, but first check if it exists in cache
  if (file_exists($image_path) && $recreate == false) { // you already downloaded that image, just return it...
    $i = getimagesize($image_path);	//Get image size
    $output = array("url"=>$base_url."/".$image_path, "width"=>$i[0], "height"=>$i[1]);
  } else {

      // if not found in local directory cache, download the image...
    $remote_image = file_get_contents($fetchUrl) or file_get_contents($imagetemp_path);
      //Check if file can be opened
    if (!$local_image  = fopen($image_path, 'w+')) {
      watchdog('content', 'imagefetchr: Do not have permissions to save local file to . '. $image_path);
    }

      //Write content to our opened file.
    if (fwrite($local_image, $remote_image) === FALSE) {
        watchdog('content', 'imagefetchr: Could not save screenshot image to local destination . '. $image_path);
    }

    fclose($local_image);
    unset($remote_image);

    $i = getimagesize($image_path);
    $output = array("url"=>$base_url."/".$image_path, "width"=>$i[0], "height"=>$i[1]);

  }

  return $output;
  
}
	
	/*
	*   Get <img> tags from URL, returns as array
	*	
	*	$link: URL to look for images
	*	Dependacies:
	*	- imagefetchr_getDomain()
	*
	*/
function imagefetchr_getimages($link) {
	
		//Get dimensions from admin settings
	$width = variable_get('imagefetchr_thumbnail_width', '125');
	$height = variable_get('imagefetchr_thumbnail_height', '125');
	
		//Set Reg Exp for which tags to look for
	//$regex = '/<img[^\/]+src="([^"]+\.(jpe?g|gif|png))/';
	$regex = '/(img|src)=("|\')[^"\'>]+/i';
	
	
	$url = $link;
	
	/**
	* Initialize the cURL session
	*/
	$ch = curl_init($url);
	/**
	* Set the URL of the page or file to download.
	*/
	
	/**
	* Ask cURL to return the contents in a variable
	* instead of simply echoing them to the browser.
	*/
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($ch, CURLOPT_HEADER, false);
	/**
	* Execute the cURL session
	*/
	$xmlsrc = curl_exec ($ch);
	/**
	* Close cURL session
	*/
	curl_close ($ch);

		// Get all images from a HTML document...  Reference: http://www.catswhocode.com/blog/15-php-regular-expressions-for-web-developers
	$images = array();
	preg_match_all($regex, $xmlsrc, $media, PREG_PATTERN_ORDER);
	//unset($data);
	$data=preg_replace('/(img|src)("|\'|="|=\')(.*)/i',"$3",$media[0]);
	foreach($data as $url)
	{
		$info = pathinfo($url);
		if (isset($info['extension']))
		{
			if ((
					($info['extension'] == 'jpg') ||
					($info['extension'] == 'jpeg') ||
					($info['extension'] == 'gif') ||
					($info['extension'] == 'png')
				) && (
					($url = imagefetchr_rel2abs($url, $link)) &&
					($i = getimagesize($url)) &&
					$i[0] >= ($width-10) &&
					$i[1] >= ($height-10)
				)) {
					array_push($images, array("url"=>$url, "width"=>$i[0], "height"=>$i[1]));
				}
		}
		
	}
	
	return $images;
	
}

	/* 
	* Returns domainname for the url provided
	*/
function imagefetchr_getDomain($url) {
    if(filter_var($url, FILTER_VALIDATE_URL, FILTER_FLAG_HOST_REQUIRED) === FALSE)
    {
        return false;
    }
    /*** get the url parts ***/
    $parts = parse_url($url);
    /*** return the host domain ***/
    return $parts['scheme'].'://'.$parts['host'];
}


	/**
	*	Return list of fields for the content type
	*/
function imagefetchr_get_node_fields($type_name, $format = NULL) {
	
	// Need to load the CCK include file where content_field_instance_create() is defined.
	module_load_include('inc', 'content', 'includes/content.admin');
	
		//Get fields from content type
	$node = content_field_overview_form(&$form_state, $type_name);
	$nodeFields = $node['#fields'];	// Load only the fields list
	$nodeFields[] = "body_field";		// Add
	$nodeFields[] = "title";				// Add
	if($format == "JSON") {
		echo imagefetchr_arr2json($nodeFields);			//Cohvert to JSON and output
	} else {
		return $nodeFields;
	}
}


	/* 
	*  Convert relational image tags into absolute url with domain name
	*	
	*/
function imagefetchr_rel2abs($url, $host) {
    if (substr($url, 0, 4) == 'http') {
        return $url;
    } else {
        $hparts = explode('/', $host);

        if ($url[0] == '/') {
            return implode('/', array_slice($hparts, 0, 3)) . $url;
        } else if ($url[0] != '.') {
            array_pop($hparts);
            return implode('/', $hparts) . '/' . $url;
        }
    }
}

	/**
	* Converts Array to JSON format
	*/
function imagefetchr_arr2json($arr){
        foreach($arr as $k=>&$val) $json[] = $k.':'.imagefetchr_php2js($val);
        if(count($json) > 0) return '{'.implode(',', $json).'}';
        else return '';
    }

    /**
     * Convert PHP to Javascript
     *
     * @param Array $val
     * @return
     */
function imagefetchr_php2js($val){
    if(is_array($val)) return imagefetchr_arr2json($val);
    if(is_string($val)) return '"'.addslashes($val).'"';
    if(is_bool($val)) return 'Boolean('.(int) $val.')';
    if(is_null($val)) return '""';
    return $val;
}
    

  /** 
	*  Convert PHP Array to JSON  
	*		Uses PHP json_encode (if available) or degrades to parse using loops
	* 	Source: http://www.bin-co.com/php/scripts/array2json/
	*/	
function imagefetchr_array2json($arr) {
	
	//if(function_exists('json_encode')) return json_encode($arr); //Lastest versions of PHP already has this functionality.
    $parts = array();
    $is_list = false;

    //Find out if the given array is a numerical array
    $keys = array_keys($arr);
    $max_length = count($arr)-1;
    if(($keys[0] == 0) and ($keys[$max_length] == $max_length)) {//See if the first key is 0 and last key is length - 1
        $is_list = true;
        for($i=0; $i<count($keys); $i++) { //See if each key correspondes to its position
            if($i != $keys[$i]) { //A key fails at position check.
                $is_list = false; //It is an associative array.
                break;
            }
        }
    }

    foreach($arr as $key=>$value) {
        if(is_array($value)) { //Custom handling for arrays
            if($is_list) $parts[] = imagefetchr_array2json($value); /* :RECURSION: */
            else $parts[] = '"' . $key . '":' . imagefetchr_array2json($value); /* :RECURSION: */
        } else {
            $str = '';
            if(!$is_list) $str = '"' . $key . '":';

            //Custom handling for multiple data types
            if(is_numeric($value)) $str .= $value; //Numbers
            elseif($value === false) $str .= 'false'; //The booleans
            elseif($value === true) $str .= 'true';
            else $str .= '"' . addslashes($value) . '"'; //All other things
            // :TODO: Is there any more datatype we should be in the lookout for? (Object?)

            $parts[] = $str;
        }
    }
    $json = implode(',',$parts);
    
    if($is_list) return '[' . $json . ']';//Return numerical JSON
    return '{' . $json . '}';//Return associative JSON
} 