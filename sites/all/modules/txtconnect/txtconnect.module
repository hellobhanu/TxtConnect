<?php


	/**
	 *	Implementation of hook_help
	 *		Adds help menu item
	 */
function txtconnect_help($path, $arg) {
  switch ($path) {
   case 'admin/help#txtconnect':
      return t('');
  }
}


	/**
	 * Implementation of hook_perm()
	 * 		Sets the permissions for the module
	 */
function txtconnect_perm() {
  return array('administer txtconnect', 'access txtconnect');
}


	/*
	 * Implementation of hook_theme().
	 *		create entries for all module specific themed functions
	 */
function txtconnect_theme() {
	$theme = array(
    	'twiliocapture' => array(
      		'arguments' => array(
        		'user' => $user
    	)),
        'twilio_send' => array(
      		'arguments' => array(
        		'user' => $user
    	)),
        'txtconnect_contacts' => array(
      		 'template'=> 'page',
            'arguments' => array(
        		'user' => $user,
                ),
          
    	),
       );
  
   return $theme;

}


/**
	 *	Implementation of hook_menu
	 *		Adds menu items or page callbacks for module
	 */
function txtconnect_menu() {
	$items = array();

	$items['twiliocapture'] = array(
		'page callback' => 'txtconnect_twilio_callback',
		'title'  => t('twilio callback'),
		'access callback' => true,
		'type' => MENU_CALLBACK
	);

    $items['twilio_query'] = array(
		'page callback' => 'txtconnect_twilio_query',
		'title'  => t('twilio send'),
		'access callback' => true,
		'type' => MENU_CALLBACK
	);

     $items['user/contacts'] = array(
		'page callback' => 'txtconnect_contacts',
		'title'  => t('My Contacts'),
		'access callback' => true,
		'type' => MENU_CALLBACK,
        'template' => 'page',
	);

	/*$items['admin/settings/previewgenerator'] = array(
		'title' 			=> t('Preview Generator settings'),
		'description' 		=> t('Preview Generator module settings'),
		'page callback' 	=> 'drupal_get_form',
		'page arguments' 	=> array('txtconnect_admin_settings'),
		'access arguments' 	=> array('administer previewgenerator'),
		'type' => MENU_NORMAL_ITEM,
		'file'				=> 'previewgenerator.admin.inc',
	);
     */

  return $items;
}

function txtconnect_contacts(){

  global $user;

  // Get user
  $uid = $user->uid;

    ////$results = db_result(db_query('SELECT users.uid AS uid, users.picture AS users_picture, users.name AS users_name, users.mail AS users_mail, txtconnect_relationships.from_uid AS txtconnect_relationships_from_uid, txtconnect_relationships.to_uid AS txtconnect_relationships_to_uid, txtconnect_relationships.message AS txtconnect_relationships_message, txtconnect_relationships.date_created AS txtconnect_relationships_date_created FROM users users  LEFT JOIN txtconnect_relationships txtconnect_relationships ON users.uid = txtconnect_relationships.from_uid WHERE txtconnect_relationships.from_uid = '.$uid .'OR WHERE txtconnect_relationships.to_uid = '. $uid));
  $results = db_query('SELECT * from txtconnect_relationships WHERE from_uid='.$uid.' OR to_uid='.$uid.' ORDER By date_created DESC');
  while($result = db_fetch_array($results)) {

    if ($result['from_uid'] == $uid) {
      $otherUid = $result['to_uid'];
    } else {
      $otherUid = $result['from_uid'];
    }
  
    //$results2 = db_query('SELECT * from users where uid=\'1\'');
    $results2 = db_query('SELECT U.uid AS uid, U.picture AS users_picture, U.name AS users_name, U.mail AS users_mail, S.screen_name AS socialmediafeeds_useraccounts_screen_name, S.service AS socialmediafeeds_useraccounts_service, P.value AS profile_values_profile_phone_value FROM users U LEFT JOIN socialmediafeeds_useraccounts S ON U.uid = S.uid LEFT JOIN profile_values P ON U.uid = P.uid AND P.fid = "1" WHERE U.uid =\''.$otherUid.'\'');
    $result2 = db_fetch_array($results2);
    //print_r($result);

      echo "Name: "; print $result2['users_name'] ."<br/>";
      echo "Email: "; print $result2['users_mail'] ."<br/>";
      echo "Message: "; print $result['message'] ."<br/>";
  }
/*
  foreach($result as $key=>$value) {
    print $result[$key]['name'];
    //print_r($result);
  }
  //Create SQL statement
*/
}


function txtconnect_twilio_callback(){

  /*
   *  Documenation References:
   *  - http://www.twilio.com/docs/api/2010-04-01/twiml/sms/twilio_request
   *  - http://www.twilio.com/docs/api/2010-04-01/twiml/sms/your_response
   */

    // Check if POST exists
  if(isset($_POST)) {

      // Get data from Twilio callback
    $accountSid = $_POST['AccountSid'];   // Get AccountSid
    $from_number = str_replace("+1","",$_POST['From']);        // Get From Phone
    //$to_number = $_POST['To'];            // Get To Phone
    $body = $_POST['Body'];               // Get Body

	$phonenumber_match_regex = '/((\((\s)*)?(\d){3}(\)|-|\s|\.)*)?(\d){3}(\)|-|\s|\.)*(\d){4}/';
	$phonenumber_normalization_regex = '/[^\d]/';

	//Find the phone number in the body. 
	if(0 == preg_match($phonenumber_match_regex, $body, $matches, PREG_OFFSET_CAPTURE))
	{
		//Error condition!
		return false;
	}    

	//Normalize the matched phone number.  Everything before it we ignore
	$to_number = preg_replace($phonenumber_normalization_regex, '', $matches[0][0]);

	//The message is everything after the phone number.  
	$relmessage = substr($body, $matches[0][1] + strlen($matches[0][0]));
	    
    //http://forum.statcounter.com/vb/archive/index.php/t-26326.html
    //http://forum.civicrm.org/index.php?topic=9767.0
    //http://www.jonra.com/temp/cleanphone.php
   
      // Check users if FROM exists
    if(!empty($from_number)){
      $from_user = txtconnect_ensureuserexists($from_number);
    }

      // Check users if TO exists
    if(!empty($to_number)){
      $to_user = txtconnect_ensureuserexists($to_number);
    }

      // Associate both accounts
    txtconnect_create_relationship($from_user->uid, $to_user->uid, $relmessage);

  }

   /*
    // Test twilio working
   $outout = "From: ". $_POST['from'] . "To: ". $_POST['to'] ."Body: " . $_POST['body'];
   $outout = $_POST['AccountSid'];
   $local_image  = fopen("sites/default/files/test.txt", 'w+') or die('Could not create the file');	//create local file
   fputs($local_image, $outout) or die('Could not write to the file');	//store remote file in newly created local file
   fclose($local_image);	//close local file
   */

}

/*
 * Send SMS to phone number
 *
 * @param $number - phone number to send
 * @param $msg - message to send in SMS
 */
function txtconnect_twilio_send($number, $msg){

    // Include twilio lib
  $module_path = drupal_get_path('module', 'txtconnect');
  require_once $module_path."/twilio/twilio.php";

    // contruct twilio account and API token
  $AccountSid = 'AC7fb96c3d990117b3734a337ff797c248';
  $AuthToken = '45c46c4ea3be1704bcb2d34529ade1ff';

    /* Twilio REST API version */
  $ApiVersion = "2010-04-01";

    // Outgoing Caller ID you have previously validated with Twilio
  $CallerID = '4254093493';

  /* Instantiate a new Twilio Rest Client */
  $client = new TwilioRestClient($AccountSid, $AuthToken);

  /* Initiate a new outbound call by POST'ing to the Calls resource */
  $response = $client->request("/$ApiVersion/Accounts/$AccountSid/SMS/Messages",
      "POST", array(
        "From" => $CallerID,
        "To" => $number,
        "Body" => $msg,
      )
  );

  if($response->IsError) {
      //echo "Error: {$response->ErrorMessage}";
      watchdog("Txt Connect", $response->ErrorMessage);
  } else {
      //echo "Send SMS: {$response->ResponseXml->Call->Sid}";
      watchdog("Txt Connect", $response->ResponseXml->SMS->Sid);
  }

}


/*
 *
 */
function txtconnect_userexists($number) {

  //db_query('SELECT v.uid, f.name, f.type, v.value FROM {profile_fields} f INNER JOIN {profile_values} v ON f.fid = v.fid WHERE f.name = "profile_phone"' , $user->uid);

  $search_for = array('name'=>$number);  // create array of fields and values to search
   $userexists = user_load($search_for);        // Load from user if exists
   return $userexists;
}

/* Get a user by userNumber, or create it if they don't exist */
function txtconnect_ensureuserexists($userNumber) {
	
    $userObject = txtconnect_userexists($userNumber);
	if (!$userObject)
	{
		// generate "random" 6-digit verification code
		$code = rand(100000, 999999);
    
		// Referene - http://www.michaelphipps.com/how-create-users-programmatically-drupal-6x
		$newUser = array(
			'name' => $userNumber,
			'pass' => $code, // note: do not md5 the password
			//'mail' => 'email address',
			'status' => 1,
			//'init' => 'email address'
		);           
		$userObject = user_save(null, $newUser);

		// TODO: Send welcome sms to new user
        txtconnect_twilio_send($userNumber, "Welcome to www.txtconnect.net, login with your phone number ".$userNumber." and code: ". $code);
		//txtconnect_twilio_send("2063756133", "6408-8559 Welcome to www.txtconnect.net, login with your phone number ".$userNumber." and code: ". $code);		
	}
	return $userObject;
}


/*
 *
 */
function txtconnect_create_relationship($userA, $userB, $relmessage){

    //Query to see if relationship already exists
  $relExist = db_result(db_query("SELECT 1 FROM {txtconnect_relationships} WHERE from_uid = '%s' AND to_uid = '%s'", $userA, $userB));

    // if no relationship exists, create it
  if (!$relExist || empty($relExist)) {

      $date_created = date_create();

        //Create value array to send to database
      $rel = array(
        'from_uid'=> $userA,
        'to_uid'=> $userB,
        'message'=> $relmessage,
        'date_created'=> $date_created,
      );

        // Enter new database record
      drupal_write_record('txtconnect_relationships', $rel);

  }

}


function txtconnect_twilio_query(){


  $module_path = drupal_get_path('module', 'txtconnect');
  require $module_path."/twilio/twilio.php";

  $AccountSid = 'AC7fb96c3d990117b3734a337ff797c248';
  $AuthToken = '45c46c4ea3be1704bcb2d34529ade1ff';


  $ApiVersion = "2010-04-01";

    // Outgoing Caller ID you have previously validated with Twilio
  $CallerID = '4254093493';


	$client = new TwilioRestClient($AccountSid, $AuthToken);


	$response = $client->request("/$ApiVersion/Accounts/$AccountSid/SMS/Messages",
		"GET");

    if($response->IsError)
    	echo "Error fetching recent calls: {$response->ErrorMessage}";
    else {
    	print_r($response->ResponseXml->SMSMessages->SMSMessage);
        foreach($response->ResponseXml->SMSMessages->SMSMessage AS $call){
    		if(strtoTime($GLOBALS['dateCreated']) > strtoTime($call->DateCreated)) {
               echo $call->DateCreated;
               $GLOBALS['dateCreated'] = $call->DateCreated;
            }
            //echo strtoTime($call->DateCreated);
        }
        echo $GLOBALS['dateCreated'];
            //echo "TXT from {$call->From} to {$call->To}";
    		//echo " at {$call->StartTime} of length: {$call->Duration}\n";

    }

}

  /**
   * Admin/settings form.
   */
function txtconnect_admin_settings($configuration) {
  
  //$form['sms_twilio_balance'] = array(
  //  '#type' => 'item',
  //  '#title' => t('Current balance'),
  //  '#value' => sms_twilio_balance(),
  //);
  
  $form['txtconnect_api_sid'] = array(
    '#type' => 'textfield',
    '#title' => t('Account SID'),
    '#description' => t('Twilio account sid.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => $configuration['sms_twilio_api_sid'],
  );
  $form['txtconnect_api_auth_token'] = array(
    '#type' => 'textfield',
    '#title' => t('API ID'),
    '#description' => t('Twilio auth token.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => $configuration['sms_twilio_api_auth_token'],
  );
  $form['txtconnect_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Number'),
    '#description' => t('The number of your Twilio account.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => $configuration['sms_twilio_number'],
  );
  $form['txtconnect_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Twilio library path'),
    '#description' => t('The path to the twilio library.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => !empty($configuration['sms_twilio_path']) ? $configuration['sms_twilio_path'] : 'sites/all/libraries/twilio',
  );

 
  return $form;
}

/**
 * Implementation of hook_views_api.
 * Notifies the Views module that we're compatible with a particular API revision.
 */
function txtconnect_views_api() {
  return array('api' => 2);
}